type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.lang.management.ManagementFactory;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";
        private static final String NO_SUCH_KEY_REASON = "No such key";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";

        private static final String fileName = "db.json";
        private static final String clientDataPath = System.getProperty("user.dir") + File.separator +
            "src" + File.separator +
            "client" + File.separator +
            "data";
        private static final String dbFilePath = System.getProperty("user.dir") + File.separator +
            "src" + File.separator +
            "server" + File.separator +
            "data" + File.separator + fileName;

        private static int threadsCount;

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            if (!Files.exists(Path.of(dbFilePath))) {
                return CheckResult.wrong("Can't find /server/data/db.json file.");
            }

            try (FileWriter fileWriter = new FileWriter(new File(dbFilePath))) {
                fileWriter.write("{}");
            } catch (IOException e) {
                return CheckResult.wrong("Close the db.json file before starting the tests.");
            }

            if (!Files.exists(Paths.get(clientDataPath))) {
                return CheckResult.correct();
            }

            String setRequest = JsonBuilder.newBuilder()
                .addValue("type", "set")
                .addValue("key", "name")
                .addValue("value", "Kate")
                .getAsJsonObject().toString();

            String getRequest = JsonBuilder.newBuilder()
                .addValue("type", "get")
                .addValue("key", "name")
                .getAsJsonObject().toString();

            String deleteRequest = JsonBuilder.newBuilder()
                .addValue("type", "delete")
                .addValue("key", "name")
                .getAsJsonObject().toString();

            try {
                Files.write(Paths.get(clientDataPath + File.separator + "testSet.json"), setRequest.getBytes());
                Files.write(Paths.get(clientDataPath + File.separator + "testGet.json"), getRequest.getBytes());
                Files.write(Paths.get(clientDataPath + File.separator + "testDelete.json"), deleteRequest.getBytes());
            } catch (IOException e) {
                throw new WrongAnswer("Can't create test files in /client/data/ folder.");
            }


            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult checkDataFolder() {

            if (!Files.exists(Paths.get(clientDataPath))) {
                return CheckResult.wrong("Can't find /client/data/ folder.");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult testInputs() throws InterruptedException {

            threadsCount = getThreadCount();
            TestedProgram server = getServer();
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            String requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            String responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "Hello world!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "HelloWorld!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "HelloWorld!")
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");
            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "text", "-v", "Some text here");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "text")
                    .value("value", "Some text here")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "text");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "text")
                );
            expectedValue = "Some text here";
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", expectedValue)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "100");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "100")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-t", "delete", "-k", "That key doesn't exist");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "That key doesn't exist")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-in", "testSet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "name")
                    .value("value", "Kate")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-in", "testGet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "Kate")
                );

            client = getClient();
            output = client.start("-in", "testDelete.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );

            client = getClient();
            output = client.start("-in", "testGet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );
            checkIfThreadWasCreated();

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }

        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

        private static int getThreadCount() {
            return (int) ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
        }

        private static void checkIfThreadWasCreated() {
            int total = getThreadCount();

             /*18 threads: 1 server thread and 17 client threads created during the test.
             If the server doesn't handle clients in a new thread then the difference between number of threads
             before and after the test should be equal 18 */
            if (total - threadsCount == 18) {
                throw new WrongAnswer("Looks like you don't process client connection in another thread.\n" +
                    "Every client request should be parsed and handled in a separate thread!");
            }
        }

        @AfterClass
        public static void deleteFiles() {
            try {
                Files.delete(Paths.get(clientDataPath + "testSet.json"));
                Files.delete(Paths.get(clientDataPath + "testGet.json"));
                Files.delete(Paths.get(clientDataPath + "testDelete.json"));
            } catch (IOException ignored) {
            }
        }
    }
  learner_created: false
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'response' key");
        }
    }
  learner_created: false
- name: src/server/Database.java
  visible: true
  text: |
    package server;

    import java.util.Arrays;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Objects;

    public class Database {
        private Map<String , String> database;
        public Database(){
            database = new HashMap<>();

        }

        public void setValue(String key, String message){
            database.put(key,message);
        }

        public String getValue(String key) throws Exception{
            if(!database.containsKey(key)) throw new Exception("No such key");
            else {
                System.out.println(database.get(key));
                System.out.println(database);
                return database.get(key);
            }
        }

        public void deleteValue(String key) throws Exception{
            if(!database.containsKey(key)) throw new Exception("No such key");
            else database.remove(key);
        }
    }
  learner_created: true
- name: src/command/Controller.java
  visible: true
  text: |
    package command;

    public class Controller {
        private Command command;

        public void setCommand(Command command) {
            this.command = command;
        }

        public void executeCommand() throws Exception {
            command.execute();
        }
    }
  learner_created: true
- name: src/server/cla/CommandLineArgument.java
  visible: true
  text: |
    package server.cla;

    import com.beust.jcommander.Parameter;
    import com.google.gson.Gson;
    import com.google.gson.annotations.Expose;

    import java.util.LinkedHashMap;
    import java.util.Map;

    public class CommandLineArgument {
        @Expose
        @Parameter(
                names = {"-t", "--type"},
                description = "Type of the request",
                order = 0)
        public String type;

        @Expose
        @Parameter(
                names = {"-k", "--key"},
                description = "Record key",
                order = 1)
        public String key;

        @Expose
        @Parameter(
                names = {"-v", "--value"},
                description = "Value to add",
                order = 2)
        public String value;



        public String getType() {
            return type;
        }

        public void setType(String type) {
            this.type = type;
        }

        public String getKey() {
            return key;
        }

        public void setKey(String key) {
            this.key = key;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }
        public String toJson() {

            Map<String, String> map = new LinkedHashMap<>();
            map.put("type", type);
            map.put("key", key);
            map.put("value", value);
            return new Gson().toJson(map);
        }
    }
  learner_created: true
- name: src/command/GetCommand.java
  visible: true
  text: |
    package command;

    public class GetCommand implements Command {
        private final Action action;
        private final String idx;
        private String res;
        public GetCommand(Action action, String idx){
            this.idx = idx;
            this.action =action;
        }
        public String GetResult(){
            return this.res;
        }
        @Override
        public void execute() throws Exception {
            this.res = action.get(idx);
        }
    }
  learner_created: true
- name: src/server/json/Response.java
  visible: true
  text: |
    package server.json;

    import com.google.gson.Gson;

    import java.util.LinkedHashMap;
    import java.util.Map;

    public class Response {
        public static final String STATUS_OK = "OK";
        public static final String STATUS_ERROR = "ERROR";

        private String msg;
        private String reason;
        private String value;

        public String setMsg() {
            return msg;
        }

        public void setMsg(String response) {
            this.msg = response;
        }

        public String getReason() {
            return reason;
        }

        public void setReason(String reason) {
            this.reason = reason;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }

        public String toJSON() {
            Map<String, String> map = new LinkedHashMap<>();
            map.put("response", msg);
            if (value != null) {
                map.put("value", value);
            }
            if (reason != null) {
                map.put("reason", reason);
            }
            return new Gson().toJson(map);

        }
    }
  learner_created: true
- name: src/server/ClientHandler.java
  visible: true
  text: |
    package server;

    import com.google.gson.Gson;
    import command.*;
    import server.json.Request;
    import server.json.Response;

    import javax.xml.crypto.Data;
    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.ServerSocket;
    import java.net.Socket;

    public class ClientHandler {


        final DataInputStream dis;
        final DataOutputStream dos;
        final Socket s;
        private final ServerSocket server;
        final private Database db;
        public ClientHandler(Socket s, DataInputStream dis, DataOutputStream dos, ServerSocket server, Database db)
        {
            this.s = s;
            this.dis = dis;
            this.dos = dos;
            this.server = server;
            this.db = db;
        }

        public void run()  {
            Controller controller = new Controller();


                String output = null;
            try {
            while(true) {

                Request request = new Gson().fromJson(dis.readUTF(), Request.class);
                Response response = new Response();
                Action action = new Action(db);
                try {


                    switch (request.getType()) {
                        case "get": {
                            GetCommand getCommand = new GetCommand(action, request.getKey());
                            controller.setCommand(getCommand);
                            controller.executeCommand();
                            response.setMsg(Response.STATUS_OK);
                            response.setValue(getCommand.GetResult());
                            break;
                        }
                        case "set": {
                            SetCommand setCommand = new SetCommand(action, request.getKey(), request.getValue());
                            controller.setCommand(setCommand);
                            controller.executeCommand();
                            response.setMsg(Response.STATUS_OK);
                            break;
                        }
                        case "delete": {
                            DeleteCommand deleteCommand = new DeleteCommand(action,request.getKey());
                            controller.setCommand(deleteCommand);
                            controller.executeCommand();
                            response.setMsg(Response.STATUS_OK);
                            break;
                        }
                        case "exit": {
                            response.setMsg(Response.STATUS_OK);
                            dos.writeUTF(response.toJSON());
                            server.close();
                            return;
                        }
                    }

                } catch (Exception e) {

                    response.setMsg(Response.STATUS_ERROR);
                    response.setReason(e.getMessage());
                } finally {
                    dos.writeUTF(response.toJSON());
                }
            }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                } finally {
                    try {
                        dis.close();
                        dos.close();
                        s.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

            }

        }
    }
  learner_created: true
- name: src/command/Action.java
  visible: true
  text: |
    package command;

    import server.Database;

    public class Action {
        Database db;

        public Action(Database db){
            this.db = db;
        }

        public String get(String idx) throws Exception {
            return db.getValue(idx);
        }
        public void set(String idx, String msg){
            db.setValue(idx, msg);
        }
        public void delete(String idx) throws Exception {
            db.deleteValue(idx);
        }
    }
  learner_created: true
- name: src/command/SetCommand.java
  visible: true
  text: |
    package command;

    public class SetCommand implements Command {
        private final Action action ;
        private String idx;
        private String msg;
        public SetCommand(Action action, String idx, String msg) {
            this.action = action;
            this.idx = idx;
            this.msg = msg;
        }

        @Override
        public void execute() {
            action.set(idx,msg);
        }
    }
  learner_created: true
- name: src/command/DeleteCommand.java
  visible: true
  text: |
    package command;

    public class DeleteCommand implements Command{
        Action action;
        String idx;
        public DeleteCommand(Action action,String idx) {
            this.action = action;
            this.idx = idx;
        }

        @Override
        public void execute() throws Exception {
            action.delete(idx);
        }
    }
  learner_created: true
- name: src/command/Command.java
  visible: true
  text: |
    package command;

    interface Command {
        public void execute() throws Exception;
    }
  learner_created: true
- name: src/server/json/Request.java
  visible: true
  text: |
    package server.json;


    public class Request {
        private String type;
        private String key;
        private String value;

        public String getType(){
            return type;
        }

        public String getValue(){
            return value;
        }
        public String getKey(){
            return key;
        }
    }
  learner_created: true
- name: test/JsonRequestBuilder.java
  visible: false
  text: |-
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;

    class JsonBuilder {

        private final Gson gson = new Gson();
        private final JsonObject jsonObject = new JsonObject();

        private JsonBuilder() {
        }

        public static JsonBuilder newBuilder() {
            return new JsonBuilder();
        }

        public JsonBuilder addValue(String key, String value) {
            jsonObject.addProperty(key, value);
            return this;
        }

        public JsonBuilder addJsonObject(String key, JsonObject object) {
            jsonObject.add(key, object);
            return this;
        }

        public String getAsString() {
            return jsonObject.toString();
        }

        public JsonObject getAsJsonObject() {
            return jsonObject;
        }
    }
  learner_created: false
- name: src/server/data/db.json
  visible: true
  learner_created: true
- name: src/client/data/test.json
  visible: true
  learner_created: true
- name: src/client/data/testSet.json
  visible: true
  learner_created: true
- name: src/client/data/testGet.json
  visible: true
  learner_created: true
- name: src/client/data/testDelete.json
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5494#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 08 Jul 2022 11:35:09 UTC
record: 5
