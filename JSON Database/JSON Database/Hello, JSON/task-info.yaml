type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";
        private static final String NO_SUCH_KEY_REASON = "No such key";
        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            String requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            String responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "Hello world!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "HelloWorld!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "HelloWorld!")
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");
            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "text", "-v", "Some text here");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "text")
                    .value("value", "Some text here")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "text");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "text")
                );
            expectedValue = "Some text here";
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", expectedValue)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "100");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "100")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-t", "delete", "-k", "That key doesn't exist");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "That key doesn't exist")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }

        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

    }
  learner_created: false
- name: src/server/Database.java
  visible: true
  text: |
    package server;

    import java.util.Arrays;
    import java.util.Objects;

    public class Database {
        private String[] database;
        public Database(){
            database = new String[100];
            Arrays.fill(database, "");
        }

        public void setValue(int idx, String message){
            database[idx-1] = message;

        }

        public String getValue(int idx) throws Exception{
            if(database[idx-1].equals("")) throw new Exception("ERROR");
            else return database[idx-1];
        }

        public void deleteValue(int idx) {
            database[idx-1] = "";
        }
    }
  learner_created: true
- name: src/command/Controller.java
  visible: true
  text: |
    package command;

    public class Controller {
        private Command command;

        public void setCommand(Command command) {
            this.command = command;
        }

        public void executeCommand() throws Exception {
            command.execute();
        }
    }
  learner_created: true
- name: src/command/Action.java
  visible: true
  text: |
    package command;

    import server.Database;

    public class Action {
        Database db;

        public Action(Database db){
            this.db = db;
        }

        public String get(int idx) throws Exception {
            return db.getValue(idx);
        }
        public void set(int idx, String msg){
            db.setValue(idx, msg);
        }
        public void delete(int idx){
            db.deleteValue(idx);
        }
    }
  learner_created: true
- name: src/server/cla/CommandLineArgument.java
  visible: true
  text: |
    package server.cla;

    import com.beust.jcommander.Parameter;
    import com.google.gson.annotations.Expose;

    public class CommandLineArgument {
        @Expose
        @Parameter(
                names = {"-t", "--type"},
                description = "Type of the request",
                order = 0)
        public String type;

        @Expose
        @Parameter(
                names = {"-i", "--index"},
                description = "Record index",
                order = 1)
        public String key;

        @Expose
        @Parameter(
                names = {"-m", "--message"},
                description = "Message to add",
                order = 2)
        public String value;



        public String getType() {
            return type;
        }

        public void setType(String type) {
            this.type = type;
        }

        public String getKey() {
            return key;
        }

        public void setKey(String key) {
            this.key = key;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }
    }
  learner_created: true
- name: src/command/SetCommand.java
  visible: true
  text: |
    package command;

    public class SetCommand implements Command {
        Action action ;
        int idx;
        String msg;
        public SetCommand(Action action, int idx, String msg) {
            this.action = action;
            this.idx = idx;
            this.msg = msg;
        }

        @Override
        public void execute() {
            action.set(idx,msg);
        }
    }
  learner_created: true
- name: src/command/GetCommand.java
  visible: true
  text: |
    package command;

    public class GetCommand implements Command {
        private final Action action;
        private final int idx;
        private String res;
        public GetCommand(Action action, int idx){
            this.idx = idx;
            this.action =action;
        }
        public String GetResult(){
            return this.res;
        }
        @Override
        public void execute() throws Exception {
            this.res = action.get(idx);
        }
    }
  learner_created: true
- name: src/command/DeleteCommand.java
  visible: true
  text: |
    package command;

    public class DeleteCommand implements Command{
        Action action;
        int idx;
        public DeleteCommand(Action action,int idx) {
            this.action = action;
            this.idx = idx;
        }

        @Override
        public void execute() {
            action.delete(idx);
        }
    }
  learner_created: true
- name: src/command/Command.java
  visible: true
  text: |
    package command;

    interface Command {
        public void execute() throws Exception;
    }
  learner_created: true
- name: src/server/ClientHandler.java
  visible: true
  text: |
    package server;

    import command.*;

    import javax.xml.crypto.Data;
    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.ServerSocket;
    import java.net.Socket;

    public class ClientHandler {


        final DataInputStream dis;
        final DataOutputStream dos;
        final Socket s;
        private ServerSocket server;
        private boolean flag = false;
        final private Database db;
        public ClientHandler(Socket s, DataInputStream dis, DataOutputStream dos, ServerSocket server, Database db)
        {
            this.s = s;
            this.dis = dis;
            this.dos = dos;
            this.server = server;
            this.db = db;
        }

        public void run()  {
            Controller controller = new Controller();


                String output = null;
            try {
            while(true) {

                String[] args = dis.readUTF().split("_");
                Action action = new Action(db);
                try {


                    switch (args[0]) {
                        case "get": {
                            GetCommand getCommand = new GetCommand(action, Integer.parseInt(args[1]));

                            controller.setCommand(getCommand);
                            controller.executeCommand();
                            output = getCommand.GetResult();
                            break;
                        }
                        case "set": {
                            SetCommand setCommand = new SetCommand(action, Integer.parseInt(args[1]), args[2]);

                            controller.setCommand(setCommand);
                            controller.executeCommand();
                            output = "OK";
                            break;
                        }
                        case "delete": {
                            DeleteCommand deleteCommand = new DeleteCommand(action, Integer.parseInt(args[1]));
                            controller.setCommand(deleteCommand);
                            controller.executeCommand();
                            output = "OK";
                            break;
                        }
                        case "exit": {
                            output = "OK";
                            dos.writeUTF(output);
                            server.close();
                            return;
                        }
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                    output = "ERROR";
                } finally {
                    dos.writeUTF(output);
                }
            }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                } finally {
                    try {
                        dis.close();
                        dos.close();
                        s.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

            }

        }
    }
  learner_created: true
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                    "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                    "It should contain 'response' key");
        }
    }
  learner_created: false
- name: src/server/json/Request.java
  visible: true
  learner_created: true
- name: src/server/json/Response.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5493#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 07 Jul 2022 12:29:25 UTC
record: 4
